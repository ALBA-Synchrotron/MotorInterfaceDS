#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        MotorInterface.py
## 
## Project :     MotorInterface to have an intermediate layer to Sardana
##
## This file is part of Tango device class.
## 
## Tango is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## Tango is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with Tango.  If not, see <http://www.gnu.org/licenses/>.
## 
##
## $Author :      mrosanes$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""This class provides an interface to Sardana motors that 
protects the Pool from inefficient clients."""

__all__ = ["MotorInterface", "MotorInterfaceClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
import time
# Add additional import
#----- PROTECTED REGION ID(MotorInterface.additionnal_import) ENABLED START -----#
import taurus
from taurus.core import TaurusListener
#----- PROTECTED REGION END -----#	//	MotorInterface.additionnal_import

## Device States Description
## No states for this device

class MotorInterface (PyTango.Device_4Impl):

    #--------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(MotorInterface.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MotorInterface.global_variables

    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        MotorInterface.init_device(self)
        #----- PROTECTED REGION ID(MotorInterface.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MotorInterface.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(MotorInterface.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MotorInterface.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Position_read = 0.0
        self.attr_Velocity_read = 0.0
        self.attr_Limit_Switches_read = [False]
        #----- PROTECTED REGION ID(MotorInterface.init_device) ENABLED START -----#
        self.motor = taurus.Device(self.MotorModel)
        self.position = taurus.Attribute(self.MotorModel+'/Position')
        self.velocity = taurus.Attribute(self.MotorModel+'/Velocity')
        self.limit_switches = taurus.Attribute(self.MotorModel+'/Limit_Switches')
        #----- PROTECTED REGION END -----#	//	MotorInterface.init_device

    def always_executed_hook(self):
        #self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(MotorInterface.always_executed_hook) ENABLED START -----#
        self.set_state(self.motor.state())
        time.sleep(0.1)
        #----- PROTECTED REGION END -----#	//	MotorInterface.always_executed_hook

    #-----------------------------------------------------------------------------
    #    MotorInterface read/write attribute methods
    #-----------------------------------------------------------------------------
    
    def read_Position(self, attr):
        #self.debug_stream("In read_Position()")
        #----- PROTECTED REGION ID(MotorInterface.Position_read) ENABLED START -----#
        self.attr_Position_read = self.position.read().value
        attr.set_value(self.attr_Position_read)  
        #----- PROTECTED REGION END -----#	//	MotorInterface.Position_read
        time.sleep(0.1)

    def write_Position(self, attr):
        #self.debug_stream("In write_Position()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(MotorInterface.Position_write) ENABLED START -----#
        self.position.write(data)
        #----- PROTECTED REGION END -----#	//	MotorInterface.Position_write
        
    def read_Velocity(self, attr):
        #self.debug_stream("In read_Velocity()")
        #----- PROTECTED REGION ID(MotorInterface.Velocity_read) ENABLED START -----#
        try:
            self.attr_Velocity_read = self.velocity.read().value
        except:
            # return a NaN when there were problems with velocity readouts
            # e.g. this way we avoid expcetions when using PseudoCounters
            # which do not have velocity
            self.attr_Velocity_read = float("NaN")
        attr.set_value(self.attr_Velocity_read)
        time.sleep(0.1)
        
        #----- PROTECTED REGION END -----#	//	MotorInterface.Velocity_read
        
    def write_Velocity(self, attr):
        #self.debug_stream("In write_Velocity()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(MotorInterface.Velocity_write) ENABLED START -----#
        self.velocity.write(data)
        #----- PROTECTED REGION END -----#	//	MotorInterface.Velocity_write
        
    def read_Limit_Switches(self, attr):
        #self.debug_stream("In read_Limit_Switches()")
        #----- PROTECTED REGION ID(MotorInterface.Limit_Switches_read) ENABLED START -----#
        self.attr_Limit_Switches_read = self.limit_switches.read().value
        attr.set_value(self.attr_Limit_Switches_read)
        #----- PROTECTED REGION END -----#	//	MotorInterface.Limit_Switches_read
        time.sleep(0.1)        
    
    
        #----- PROTECTED REGION ID(MotorInterface.initialize_dynamic_attributes) ENABLED START -----#
    def initialize_dynamic_attributes(self):
        pass
        #----- PROTECTED REGION END -----#	//	MotorInterface.initialize_dynamic_attributes
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        time.sleep(0.1)
        #----- PROTECTED REGION ID(MotorInterface.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MotorInterface.read_attr_hardware


    #-----------------------------------------------------------------------------
    #    MotorInterface command methods
    #-----------------------------------------------------------------------------
    

class MotorInterfaceClass(PyTango.DeviceClass):
    #--------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(MotorInterface.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MotorInterface.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`MotorInterface.initialize_dynamic_attributes` for each device
    
        :param dev_list: list of devices
        :type dev_list: :class:`PyTango.DeviceImpl`"""
    
        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback
                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
        #----- PROTECTED REGION ID(MotorInterface.dyn_attr) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MotorInterface.dyn_attr

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'MotorModel':
            [PyTango.DevString,
            "the Sardana motor to be interfaced",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'Position':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Velocity':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Limit_Switches':
            [[PyTango.DevBoolean,
            PyTango.SPECTRUM,
            PyTango.READ, 3]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(MotorInterfaceClass,MotorInterface,'MotorInterface')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
